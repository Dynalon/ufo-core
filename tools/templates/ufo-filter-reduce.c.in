#include <gmodule.h>
#ifdef __APPLE__
#include <OpenCL/cl.h>
#else
#include <CL/cl.h>
#endif

#include <ufo/ufo-filter-reduce.h>
#include <ufo/ufo-buffer.h>
#include "ufo-filter-{{hyphenated}}.h"

/**
 * SECTION:ufo-filter-{{hyphenated}}
 * @Short_description: A short description
 * @Title: A short title
 *
 * Some in-depth information
 */

struct _UfoFilter{{camelcased}}Private {
};

G_DEFINE_TYPE(UfoFilter{{camelcased}}, ufo_filter_{{underscored}}, UFO_TYPE_FILTER_REDUCE)

#define UFO_FILTER_{{uppercased}}_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), UFO_TYPE_FILTER_{{underscored}}, UfoFilter{{camelcased}}Private))

enum {
    PROP_0,
    N_PROPERTIES
};

static GParamSpec *{{uppercased}}_properties[N_PROPERTIES] = { NULL, };

static void
ufo_filter_{{underscored}}_initialize (UfoFilterReduce *filter, UfoBuffer *input[], guint **dims, gfloat *default_value, GError **error)
{
    UfoFilter{{camelcased}}Private *priv;

    priv = UFO_FILTER_{{uppercased}}_GET_PRIVATE (filter);

    *default_value = 0.0f;
}

static void
ufo_filter_{{underscored}}_collect (UfoFilterReduce *filter, UfoBuffer *input[], UfoBuffer *output[], GError **error)
{
    UfoFilter{{camelcased}}Private *priv;

    priv = UFO_FILTER_{{uppercased}}_GET_PRIVATE (filter);
}

static gboolean
ufo_filter_{{underscored}}_reduce (UfoFilterReduce *filter, UfoBuffer *output[], gpointer cmd_queue, GError **error)
{
    UfoFilter{{camelcased}}Private *priv;
    gboolean more;

    priv = UFO_FILTER_{{uppercased}}_GET_PRIVATE (filter);
    more = TRUE;

    if (more) {
        more = FALSE;
        return TRUE;
    }

    return FALSE;
}

static void
ufo_filter_{{underscored}}_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec)
{
    UfoFilter{{camelcased}}Private *priv;

    priv = UFO_FILTER_{{uppercased}}_GET_PRIVATE (object);

    switch (property_id) {
        default:
            G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
            break;
    }
}

static void
ufo_filter_{{underscored}}_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec)
{
    UfoFilter{{camelcased}}Private *priv;

    priv = UFO_FILTER_{{uppercased}}_GET_PRIVATE (object);

    switch (property_id) {
        default:
            G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
            break;
    }
}

static void
ufo_filter_{{underscored}}_finalize (GObject *object)
{
    UfoFilter{{camelcased}}Private *priv = UFO_FILTER_{{uppercased}}_GET_PRIVATE (object);

    /* Use this place to free any memory/resources allocated before */

    G_OBJECT_CLASS (ufo_filter_{{uppercased}}_parent_class)->finalize (object);
}

static void
ufo_filter_{{underscored}}_class_init (UfoFilter{{camelcased}}Class *klass)
{
    GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
    UfoFilterReduceClass *filter_class = UFO_FILTER_REDUCE_CLASS (klass);

    gobject_class->set_property = ufo_filter_{{uppercased}}_set_property;
    gobject_class->get_property = ufo_filter_{{uppercased}}_get_property;
    gobject_class->finalize = ufo_filter_{{uppercased}}_finalize;
    filter_class->initialize = ufo_filter_{{uppercased}}_initialize;
    filter_class->collect = ufo_filter_{{uppercased}}_collect;
    filter_class->reduce = ufo_filter_{{uppercased}}_reduce;

    for (guint i = PROP_0 + 1; i < N_PROPERTIES; i++)
        g_object_class_install_property (gobject_class, i, {{underscored}}_properties[i]);

    g_type_class_add_private (gobject_class, sizeof (UfoFilter{{camelcased}}Private));
}

static void
ufo_filter_{{underscored}}_init (UfoFilter{{camelcased}} *self)
{
    /* Define number and dimensions of the outputs */
    UfoOutputParameter output_params[] = {{2}};

    self->priv = UFO_FILTER_{{uppercased}}_GET_PRIVATE (self);

    /* Register the outputs */
    ufo_filter_register_outputs (UFO_FILTER (self), 1, output_params);
}

G_MODULE_EXPORT UfoFilter *
ufo_filter_plugin_new (void)
{
    return g_object_new (UFO_TYPE_FILTER_{{uppercased}}, NULL);
}
